--- a/src/bltVecMath.c
+++ b/src/bltVecMath.c
@@ -372,7 +372,6 @@
             continue;
         }
         dx = vecObjPtr->valueArr[i] - mean;
-        dx = FABS(dx);
         dx2 = dx * dx;
         var += dx2;
         skew += dx2 * dx;
@@ -2157,7 +2156,7 @@
     {"norm",    VectorFunc,     Norm},
     {"prod",    ScalarFunc,     Product},
     {"q1",      ScalarFunc,     Q1},
-    {"q2",      ScalarFunc,     Mean},
+    {"q2",      ScalarFunc,     Median},
     {"q3",      ScalarFunc,     Q3},
     {"random",  PointNoArgsFunc ,drand48},
     {"round",   PointFunc,      Round},
--- a/src/bltVector.c
+++ b/src/bltVector.c
@@ -148,8 +148,12 @@
         Blt_Offset(CreateSwitches, watchUnset), 0},
     {BLT_SWITCH_BOOLEAN, "-flush", "bool", (char *)NULL,
         Blt_Offset(CreateSwitches, flush), 0},
-    {BLT_SWITCH_LONG_POS, "-length", "length", (char *)NULL,
+    {BLT_SWITCH_INT_POS, "-length", "length", (char *)NULL,
         Blt_Offset(CreateSwitches, size), 0},
+    {BLT_SWITCH_INT_POS, "-first", "index", (char *)NULL,
+        Blt_Offset(CreateSwitches, first), 0},
+    {BLT_SWITCH_INT_POS, "-last", "index", (char *)NULL,
+        Blt_Offset(CreateSwitches, last), 0},
     {BLT_SWITCH_END}
 };
 
@@ -374,7 +378,11 @@
 
     c = string[0];
     colon = strchr(string, ':');
-    if (colon != NULL) {
+    if ((c == ':') && (strcmp(string, ":") == 0) ||
+        (c == 'a') && (strcmp(string, "all") == 0)) {
+        vecObjPtr->first = 0;
+        vecObjPtr->last = vecObjPtr->length;
+    } else if (colon != NULL) {
         if (string == colon) {
             vecObjPtr->first = 0;       /* Colon is first character.  First
                                          * index is defaults to 0. */
@@ -405,13 +413,10 @@
         if (vecObjPtr->first >= vecObjPtr->last) {
             if (interp != NULL) {
                 Tcl_AppendResult(interp, "bad range \"", string,
-                         "\" (first >= last)", (char *)NULL);
+                         "\" (first > last)", (char *)NULL);
             }
             return TCL_ERROR;
         }
-    } else if ((c == 'a') && (strcmp(string, "all") == 0)) {
-        vecObjPtr->first = 0;
-        vecObjPtr->last = vecObjPtr->length;
     } else {
         int index;
 
@@ -1498,6 +1503,85 @@
 /*
  *---------------------------------------------------------------------------
  *
+ * ParseNameSpec --
+ *
+ *      Split vector name like a(10) or a(1:15) to the name a, size 10
+ *      and/or first 1, last 15
+ *
+ * Results:
+ *      Returns the vector name and puts the size into the supplied int
+ *      variable. If there is no size portion, size is set to 0.
+ *
+ *---------------------------------------------------------------------------
+ */
+
+static const char *
+ParseNameSpec(Tcl_Interp *interp, Tcl_Obj *namePtr, int *sizePtr, int *firstPtr, int *lastPtr)
+{
+    char *leftParen, *rightParen, *colon;
+    char *string;
+    int size, first, last;
+    int result;
+    Tcl_Obj *newNamePtr;
+
+    size = first = last = 0;
+    string = Tcl_GetString(namePtr);
+    leftParen = strchr(string, '(');
+    rightParen = strchr(string, ')');
+    if (((leftParen != NULL) && (rightParen == NULL)) ||
+        ((leftParen == NULL) && (rightParen != NULL)) ||
+        (leftParen > rightParen)) {
+        Tcl_AppendResult(interp, "bad vector specification \"", string,
+            "\"", (char *)NULL);
+        return NULL;
+    }
+
+    if (leftParen == NULL) {
+        if (sizePtr != NULL) *sizePtr = size;
+        if (firstPtr != NULL) *firstPtr = first;
+        if (lastPtr != NULL) *lastPtr = last;
+        return string;
+    }
+
+    *rightParen = '\0';
+    colon = strchr(leftParen + 1, ':');
+    if (colon != NULL) {
+
+        /* Specification is in the form vecName(first:last) */
+        *colon = '\0';
+        result = Tcl_GetInt(interp, leftParen+1, &first);
+        *colon = ':';
+        if ((*(colon + 1) != '\0') && (result == TCL_OK)) {
+            result = Tcl_GetInt(interp, colon + 1, &last);
+            if ((result != TCL_OK) || (first > last)) {
+                Tcl_AppendResult(interp, "bad vector range \"",
+                    leftParen + 1, "\"", (char *)NULL);
+                result = TCL_ERROR;
+            } else {
+                size = last - first + 1;
+            }
+        }
+    } else {
+        /* Specification is in the form vecName(size) */
+        result = Tcl_GetInt(interp, leftParen + 1, &size);
+    }
+    *rightParen = ')';
+    if (result != TCL_OK) {
+        return NULL;
+    }
+    
+    /* Return the name part before the left parenthesis */
+    newNamePtr = Tcl_NewStringObj(string, leftParen-string);
+    if (sizePtr != NULL) *sizePtr = size;
+    if (firstPtr != NULL) *firstPtr = first;
+    if (lastPtr != NULL) *lastPtr = last;
+
+    return Tcl_GetString(newNamePtr);
+}
+
+/*
+ *---------------------------------------------------------------------------
+ *
  * OldVectorCreate --
  *
  *      Creates a TCL command, and array variable representing an instance
@@ -1569,62 +1653,20 @@
         }
     }
     for (i = 0; i < count; i++) {
-        char *leftParen, *rightParen;
-        char *string;
+        const char *string;
         int isNew;
         int size, first, last;
 
         size = first = last = 0;
-        string = Tcl_GetString(objv[i + argStart]);
-        leftParen = strchr(string, '(');
-        rightParen = strchr(string, ')');
-        if (((leftParen != NULL) && (rightParen == NULL)) ||
-            ((leftParen == NULL) && (rightParen != NULL)) ||
-            (leftParen > rightParen)) {
-            Tcl_AppendResult(interp, "bad vector specification \"", string,
-                "\"", (char *)NULL);
-            goto error;
-        }
-        if (leftParen != NULL) {
-            int result;
-            char *colon;
 
-            *rightParen = '\0';
-            colon = strchr(leftParen + 1, ':');
-            if (colon != NULL) {
-
-                /* Specification is in the form vecName(first:last) */
-                *colon = '\0';
-                result = Tcl_GetInt(interp, leftParen+1, &first);
-                if ((*(colon + 1) != '\0') && (result == TCL_OK)) {
-                    result = Tcl_GetInt(interp, colon + 1, &last);
-                    if (first >= last) {
-                        Tcl_AppendResult(interp, "bad vector range \"",
-                            string, "\"", (char *)NULL);
-                        result = TCL_ERROR;
-                    }
-                    size = last - first;
-                }
-                *colon = ':';
-            } else {
-                /* Specification is in the form vecName(size) */
-                result = Tcl_GetInt(interp, leftParen + 1, &size);
-            }
-            *rightParen = ')';
-            if (result != TCL_OK) {
-                goto error;
-            }
-        }
-        if (leftParen != NULL) {
-            *leftParen = '\0';
+        string = ParseNameSpec(interp, objv[i + argStart], &size, &first, &last);
+        if (string == NULL) {
+            goto error;
         }
         /* By default, the TCL command is the name of the vector. */
         vecObjPtr = Blt_VecObj_Create(dataPtr, string,
             (switches.cmdName == NULL) ? string : switches.cmdName,
             (switches.varName == NULL) ? string : switches.varName, &isNew);
-        if (leftParen != NULL) {
-            *leftParen = '(';
-        }
         if (vecObjPtr == NULL) {
             goto error;
         }
@@ -1750,21 +1792,28 @@
     const char *qualName, *varName;
     Blt_ObjectName objName;
     const char *name;
+    int size, first, last;
     Tcl_DString ds, ds2, ds3;
         
-    Tcl_DStringInit(&ds2);
-    Tcl_DStringInit(&ds3);
     name = NULL;
+    size = first = last = 0;
     varName = NULL;
     if (objc >= 3) {
         const char *string;
 
         string = Tcl_GetString(objv[2]);
         if (string[0] != '-') {
-            name = string;
+            name = ParseNameSpec(interp, objv[2], &size, &first, &last);
+        
+            if (name == NULL) {
+                return TCL_ERROR;
+            }
+
             objc--, objv++;
         }
     }
+    Tcl_DStringInit(&ds2);
+    Tcl_DStringInit(&ds3);
     Tcl_DStringInit(&ds);
     if (name == NULL) {
         qualName = GenerateName(dataPtr, interp, "", "", &ds);
@@ -1845,11 +1894,27 @@
             goto error;
         }
     }
+    if (switches.size > 0) {
+        size = switches.size;
+    }
+    if (switches.first > 0) {
+        first = switches.first;
+    }
+    if (switches.last > 0) {
+        last = switches.last;
+        if (first > last) {
+            Tcl_AppendResult(interp, "bad vector range \"", (char *)NULL);
+            Tcl_AppendResult(interp, Blt_Itoa(first), ":", (char *)NULL);
+            Tcl_AppendResult(interp, Blt_Itoa(last), "\"", (char *)NULL);
+            goto error;
+        }
+        size = last - first + 1;
+    }
     vecObjPtr->freeOnUnset = switches.watchUnset;
     vecObjPtr->flush = switches.flush;
-    vecObjPtr->offset = 0;
-    if (switches.size > 0) {
-        if (Blt_VecObj_ChangeLength(interp, vecObjPtr, switches.size) != TCL_OK) {
+    vecObjPtr->offset = first;
+    if (size > 0) {
+        if (Blt_VecObj_ChangeLength(interp, vecObjPtr, size) != TCL_OK) {
             goto error;
         }
     }
--- a/tests/vector.tcl
+++ b/tests/vector.tcl
@@ -80,8 +80,9 @@
    -command command
    -watchunset bool
    -flush bool
-   -length length}}
-
+   -length length
+   -first index
+   -last index}}
 
 test vector.15 {vector names} {
     list [catch {blt::vector names} msg] [lsort $msg]
@@ -570,19 +571,19 @@
 
 test vector.114 {blt::vector expr skew(myVec1)} {
     list [catch {blt::vector expr skew(myVec1)} msg] $msg
-} {0 0.6415002990995843}
+} {0 -0.20782656212951636}
 
 test vector.115 {blt::vector expr var(myVec1)} {
     list [catch {blt::vector expr var(myVec1)} msg] $msg
-} {0 3.0}
+} {0 2.333333333333333}
 
 test vector.116 {blt::vector expr sdev(myVec1)} {
     list [catch {blt::vector expr sdev(myVec1)} msg] $msg
-} {0 1.7320508075688772}
+} {0 1.5275252316519465}
 
 test vector.117 {blt::vector expr adev(myVec1)} {
     list [catch {blt::vector expr adev(myVec1)} msg] $msg
-} {0 1.3333333333333333}
+} {0 1.1111111111111112}
 
 test vector.118 {blt::vector expr prod(myVec1)} {
     list [catch {blt::vector expr prod(myVec1)} msg] $msg
@@ -590,11 +591,11 @@
 
 test vector.119 {blt::vector expr mean(myVec1)} {
     list [catch {blt::vector expr mean(myVec1)} msg] $msg
-} {0 2.0}
+} {0 2.6666666666666665}
 
 test vector.120 {blt::vector expr skew(myVec1)} {
     list [catch {blt::vector expr skew(myVec1)} msg] $msg
-} {0 0.6415002990995843}
+} {0 -0.20782656212951636}
 
 test vector.121 {blt::vector expr tanh(myVec1)} {
     list [catch {blt::vector expr tanh(myVec1)} msg] $msg
@@ -679,7 +680,7 @@
 
 test vector.141 {blt::vector expr q2(myVec1)} {
     list [catch {blt::vector expr q2(myVec1)} msg] $msg
-} {0 2.0}
+} {0 3.0}
 
 test vector.142 {blt::vector expr q3(myVec1)} {
     list [catch {blt::vector expr q3(myVec1)} msg] $msg
@@ -1207,14 +1208,90 @@
     list [catch { set x_values(end) } msg] $msg
 } {0 52.0}
 
-test vector.245 { preallocated vector } {
-    list [catch { blt::vector create x_values(50) } msg] $msg
-} {0 ::x_values}
+test vector.247 { preallocated vector } {
+    list [catch { blt::vector create z_values(50) } msg] $msg
+} {0 ::z_values}
 
-test vector.245 { preallocated vector } {
+test vector.248 { preallocated vector } {
     list [catch { blt::vector create y_values -length 50 } msg] $msg
 } {0 ::y_values}
 
+test vector.249 { preallocated vector by range } {
+    list [catch { blt::vector create z1_values(1:50) } msg] $msg
+} {0 ::z1_values}
+
+test vector.250 { preallocated vector by range error } {
+    list [catch { blt::vector create z2_values(50:1) } msg] $msg
+} {1 {bad vector range "50:1"}}
+
+test vector.251 { preallocated vector with first index } {
+    list [catch { 
+        blt::vector create y1_values -first 10
+        y1_values append 0.0
+        set y1_values(10)
+    } msg] $msg
+} {0 0.0}
+
+test vector.252 { preallocated vector with first index and length } {
+    list [catch { 
+        blt::vector create y2_values -first 10 -length 2
+        list [set y2_values(10)] [set y2_values(:)]
+    } msg] $msg
+} {0 {NaN {NaN NaN}}}
+
+test vector.253 { preallocated vector with first and last indices } {
+    list [catch { 
+        blt::vector create y3_values -first 10 -last 12
+        list [set y3_values(10)] [set y3_values(12)] [set y3_values(:)]
+    } msg] $msg
+} {0 {NaN NaN {NaN NaN NaN}}}
+
+# last overrides length
+test vector.254 { preallocated vector with first, last indices and length } {
+    list [catch { 
+        blt::vector create y4_values -first 10 -last 12 -length 10
+        list [set y4_values(10)] [set y4_values(12)] [set y4_values(:)]
+    } msg] $msg
+} {0 {NaN NaN {NaN NaN NaN}}}
+
+# last overrides length
+test vector.255 { preallocated vector with last index and length } {
+    list [catch { 
+        blt::vector create y5_values -last 2 -length 10
+        list [set y5_values(0)] [set y5_values(2)] [set y5_values(:)]
+    } msg] $msg
+} {0 {NaN NaN {NaN NaN NaN}}}
+
+test vector.256 { preallocated vector with error in first index } {
+    list [catch { blt::vector create -first x } msg] $msg
+} {1 {expected integer but got "x"}}
+
+test vector.257 { preallocated vector with error in first index } {
+    list [catch { blt::vector create -last x } msg] $msg
+} {1 {expected integer but got "x"}}
+
+test vector.258 { preallocated vector with error in first index } {
+    list [catch { blt::vector create -length x } msg] $msg
+} {1 {expected integer but got "x"}}
+
+test vector.256 { preallocated vector with error in first index } {
+    list [catch { blt::vector create -first -1 } msg] $msg
+} {1 {bad value "-1": can't be negative}}
+
+test vector.257 { preallocated vector with error in first index } {
+    list [catch { blt::vector create -last -1 } msg] $msg
+} {1 {bad value "-1": can't be negative}}
+
+test vector.258 { preallocated vector with error in first index } {
+    list [catch { blt::vector create -length -1 } msg] $msg
+} {1 {bad value "-1": can't be negative}}
+
+test vector.259 { empty vector } {
+    list [catch {
+        blt::vector create y6_values
+        set y6_values(:)
+    } msg] $msg
+} {0 {}}
 
 
 exit 0
